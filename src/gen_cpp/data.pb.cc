// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace doris {
class PQueryStatisticsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PQueryStatistics>
      _instance;
} _PQueryStatistics_default_instance_;
class PRowBatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PRowBatch>
      _instance;
} _PRowBatch_default_instance_;
class PColumn_DecimalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PColumn_Decimal>
      _instance;
} _PColumn_Decimal_default_instance_;
class PColumnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PColumn>
      _instance;
} _PColumn_default_instance_;
class PBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PBlock>
      _instance;
} _PBlock_default_instance_;
}  // namespace doris
namespace protobuf_data_2eproto {
void InitDefaultsPQueryStatisticsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::doris::_PQueryStatistics_default_instance_;
    new (ptr) ::doris::PQueryStatistics();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doris::PQueryStatistics::InitAsDefaultInstance();
}

void InitDefaultsPQueryStatistics() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPQueryStatisticsImpl);
}

void InitDefaultsPRowBatchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::doris::_PRowBatch_default_instance_;
    new (ptr) ::doris::PRowBatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doris::PRowBatch::InitAsDefaultInstance();
}

void InitDefaultsPRowBatch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPRowBatchImpl);
}

void InitDefaultsPColumn_DecimalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::doris::_PColumn_Decimal_default_instance_;
    new (ptr) ::doris::PColumn_Decimal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doris::PColumn_Decimal::InitAsDefaultInstance();
}

void InitDefaultsPColumn_Decimal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPColumn_DecimalImpl);
}

void InitDefaultsPColumnImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsPColumn_Decimal();
  {
    void* ptr = &::doris::_PColumn_default_instance_;
    new (ptr) ::doris::PColumn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doris::PColumn::InitAsDefaultInstance();
}

void InitDefaultsPColumn() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPColumnImpl);
}

void InitDefaultsPBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsPColumn();
  {
    void* ptr = &::doris::_PBlock_default_instance_;
    new (ptr) ::doris::PBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::doris::PBlock::InitAsDefaultInstance();
}

void InitDefaultsPBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPBlockImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PQueryStatistics, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PQueryStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PQueryStatistics, scan_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PQueryStatistics, scan_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PQueryStatistics, returned_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PQueryStatistics, cpu_ms_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, num_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, row_tuples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, tuple_offsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, tuple_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PRowBatch, is_compressed_),
  1,
  ~0u,
  ~0u,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn_Decimal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn_Decimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn_Decimal, precision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn_Decimal, scale_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, is_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, binary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, compressed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PColumn, decimal_param_),
  0,
  3,
  ~0u,
  1,
  4,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PBlock, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PBlock, num_rows_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PBlock, num_columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::doris::PBlock, columns_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::doris::PQueryStatistics)},
  { 13, 23, sizeof(::doris::PRowBatch)},
  { 28, 35, sizeof(::doris::PColumn_Decimal)},
  { 37, 48, sizeof(::doris::PColumn)},
  { 54, 62, sizeof(::doris::PBlock)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::doris::_PQueryStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doris::_PRowBatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doris::_PColumn_Decimal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doris::_PColumn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::doris::_PBlock_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndata.proto\022\005doris\"`\n\020PQueryStatistics\022"
      "\021\n\tscan_rows\030\001 \001(\003\022\022\n\nscan_bytes\030\002 \001(\003\022\025"
      "\n\rreturned_rows\030\003 \001(\003\022\016\n\006cpu_ms\030\004 \001(\003\"s\n"
      "\tPRowBatch\022\020\n\010num_rows\030\001 \002(\005\022\022\n\nrow_tupl"
      "es\030\002 \003(\005\022\025\n\rtuple_offsets\030\003 \003(\005\022\022\n\ntuple"
      "_data\030\004 \002(\014\022\025\n\ris_compressed\030\005 \002(\010\"\303\004\n\007P"
      "Column\022\014\n\004name\030\001 \002(\t\022%\n\004type\030\002 \002(\0162\027.dor"
      "is.PColumn.DataType\022\017\n\007is_null\030\003 \003(\010\022\016\n\006"
      "binary\030\004 \001(\014\022\031\n\ncompressed\030\005 \001(\010:\005false\022"
      "-\n\rdecimal_param\030\006 \001(\0132\026.doris.PColumn.D"
      "ecimal\032+\n\007Decimal\022\021\n\tprecision\030\001 \001(\r\022\r\n\005"
      "scale\030\002 \001(\r\"\352\002\n\010DataType\022\t\n\005UINT8\020\000\022\n\n\006U"
      "INT16\020\001\022\n\n\006UINT32\020\002\022\n\n\006UINT64\020\003\022\013\n\007UINT1"
      "28\020\004\022\013\n\007UINT256\020\005\022\t\n\005INT16\020\006\022\010\n\004INT8\020\007\022\t"
      "\n\005INT32\020\010\022\t\n\005INT64\020\t\022\n\n\006INT128\020\n\022\n\n\006INT2"
      "56\020\013\022\013\n\007FLOAT32\020\014\022\013\n\007FLOAT64\020\r\022\013\n\007BOOLEA"
      "N\020\016\022\010\n\004DATE\020\017\022\014\n\010DATETIME\020\020\022\007\n\003HLL\020\021\022\n\n\006"
      "BITMAP\020\022\022\t\n\005ARRAY\020\023\022\007\n\003MAP\020\024\022\n\n\006STRUCT\020\025"
      "\022\n\n\006STRING\020\026\022\r\n\tDECIMAL32\020\027\022\r\n\tDECIMAL64"
      "\020\030\022\016\n\nDECIMAL128\020\031\022\t\n\005BYTES\020\032\022\013\n\007NOTHING"
      "\020\033\022\014\n\007UNKNOWN\020\347\007\"P\n\006PBlock\022\020\n\010num_rows\030\001"
      " \001(\004\022\023\n\013num_columns\030\002 \001(\r\022\037\n\007columns\030\003 \003"
      "(\0132\016.doris.PColumnB\030\n\026org.apache.doris.p"
      "roto"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_data_2eproto
namespace doris {
const ::google::protobuf::EnumDescriptor* PColumn_DataType_descriptor() {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_data_2eproto::file_level_enum_descriptors[0];
}
bool PColumn_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PColumn_DataType PColumn::UINT8;
const PColumn_DataType PColumn::UINT16;
const PColumn_DataType PColumn::UINT32;
const PColumn_DataType PColumn::UINT64;
const PColumn_DataType PColumn::UINT128;
const PColumn_DataType PColumn::UINT256;
const PColumn_DataType PColumn::INT16;
const PColumn_DataType PColumn::INT8;
const PColumn_DataType PColumn::INT32;
const PColumn_DataType PColumn::INT64;
const PColumn_DataType PColumn::INT128;
const PColumn_DataType PColumn::INT256;
const PColumn_DataType PColumn::FLOAT32;
const PColumn_DataType PColumn::FLOAT64;
const PColumn_DataType PColumn::BOOLEAN;
const PColumn_DataType PColumn::DATE;
const PColumn_DataType PColumn::DATETIME;
const PColumn_DataType PColumn::HLL;
const PColumn_DataType PColumn::BITMAP;
const PColumn_DataType PColumn::ARRAY;
const PColumn_DataType PColumn::MAP;
const PColumn_DataType PColumn::STRUCT;
const PColumn_DataType PColumn::STRING;
const PColumn_DataType PColumn::DECIMAL32;
const PColumn_DataType PColumn::DECIMAL64;
const PColumn_DataType PColumn::DECIMAL128;
const PColumn_DataType PColumn::BYTES;
const PColumn_DataType PColumn::NOTHING;
const PColumn_DataType PColumn::UNKNOWN;
const PColumn_DataType PColumn::DataType_MIN;
const PColumn_DataType PColumn::DataType_MAX;
const int PColumn::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void PQueryStatistics::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PQueryStatistics::kScanRowsFieldNumber;
const int PQueryStatistics::kScanBytesFieldNumber;
const int PQueryStatistics::kReturnedRowsFieldNumber;
const int PQueryStatistics::kCpuMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PQueryStatistics::PQueryStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_data_2eproto::InitDefaultsPQueryStatistics();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doris.PQueryStatistics)
}
PQueryStatistics::PQueryStatistics(const PQueryStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scan_rows_, &from.scan_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_ms_) -
    reinterpret_cast<char*>(&scan_rows_)) + sizeof(cpu_ms_));
  // @@protoc_insertion_point(copy_constructor:doris.PQueryStatistics)
}

void PQueryStatistics::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&scan_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_ms_) -
      reinterpret_cast<char*>(&scan_rows_)) + sizeof(cpu_ms_));
}

PQueryStatistics::~PQueryStatistics() {
  // @@protoc_insertion_point(destructor:doris.PQueryStatistics)
  SharedDtor();
}

void PQueryStatistics::SharedDtor() {
}

void PQueryStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PQueryStatistics::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PQueryStatistics& PQueryStatistics::default_instance() {
  ::protobuf_data_2eproto::InitDefaultsPQueryStatistics();
  return *internal_default_instance();
}

PQueryStatistics* PQueryStatistics::New(::google::protobuf::Arena* arena) const {
  PQueryStatistics* n = new PQueryStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PQueryStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PQueryStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&scan_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_ms_) -
        reinterpret_cast<char*>(&scan_rows_)) + sizeof(cpu_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PQueryStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doris.PQueryStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 scan_rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_scan_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scan_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 scan_bytes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scan_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scan_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 returned_rows = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_returned_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &returned_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cpu_ms = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_cpu_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doris.PQueryStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doris.PQueryStatistics)
  return false;
#undef DO_
}

void PQueryStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doris.PQueryStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 scan_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->scan_rows(), output);
  }

  // optional int64 scan_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->scan_bytes(), output);
  }

  // optional int64 returned_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->returned_rows(), output);
  }

  // optional int64 cpu_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cpu_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doris.PQueryStatistics)
}

::google::protobuf::uint8* PQueryStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doris.PQueryStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 scan_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->scan_rows(), target);
  }

  // optional int64 scan_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->scan_bytes(), target);
  }

  // optional int64 returned_rows = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->returned_rows(), target);
  }

  // optional int64 cpu_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cpu_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PQueryStatistics)
  return target;
}

size_t PQueryStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PQueryStatistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 scan_rows = 1;
    if (has_scan_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scan_rows());
    }

    // optional int64 scan_bytes = 2;
    if (has_scan_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scan_bytes());
    }

    // optional int64 returned_rows = 3;
    if (has_returned_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->returned_rows());
    }

    // optional int64 cpu_ms = 4;
    if (has_cpu_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cpu_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PQueryStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PQueryStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const PQueryStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PQueryStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PQueryStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PQueryStatistics)
    MergeFrom(*source);
  }
}

void PQueryStatistics::MergeFrom(const PQueryStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PQueryStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      scan_rows_ = from.scan_rows_;
    }
    if (cached_has_bits & 0x00000002u) {
      scan_bytes_ = from.scan_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      returned_rows_ = from.returned_rows_;
    }
    if (cached_has_bits & 0x00000008u) {
      cpu_ms_ = from.cpu_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PQueryStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PQueryStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PQueryStatistics::CopyFrom(const PQueryStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PQueryStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PQueryStatistics::IsInitialized() const {
  return true;
}

void PQueryStatistics::Swap(PQueryStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PQueryStatistics::InternalSwap(PQueryStatistics* other) {
  using std::swap;
  swap(scan_rows_, other->scan_rows_);
  swap(scan_bytes_, other->scan_bytes_);
  swap(returned_rows_, other->returned_rows_);
  swap(cpu_ms_, other->cpu_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PQueryStatistics::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PRowBatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRowBatch::kNumRowsFieldNumber;
const int PRowBatch::kRowTuplesFieldNumber;
const int PRowBatch::kTupleOffsetsFieldNumber;
const int PRowBatch::kTupleDataFieldNumber;
const int PRowBatch::kIsCompressedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRowBatch::PRowBatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_data_2eproto::InitDefaultsPRowBatch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doris.PRowBatch)
}
PRowBatch::PRowBatch(const PRowBatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      row_tuples_(from.row_tuples_),
      tuple_offsets_(from.tuple_offsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tuple_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tuple_data()) {
    tuple_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tuple_data_);
  }
  ::memcpy(&num_rows_, &from.num_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_compressed_) -
    reinterpret_cast<char*>(&num_rows_)) + sizeof(is_compressed_));
  // @@protoc_insertion_point(copy_constructor:doris.PRowBatch)
}

void PRowBatch::SharedCtor() {
  _cached_size_ = 0;
  tuple_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_compressed_) -
      reinterpret_cast<char*>(&num_rows_)) + sizeof(is_compressed_));
}

PRowBatch::~PRowBatch() {
  // @@protoc_insertion_point(destructor:doris.PRowBatch)
  SharedDtor();
}

void PRowBatch::SharedDtor() {
  tuple_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PRowBatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRowBatch::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PRowBatch& PRowBatch::default_instance() {
  ::protobuf_data_2eproto::InitDefaultsPRowBatch();
  return *internal_default_instance();
}

PRowBatch* PRowBatch::New(::google::protobuf::Arena* arena) const {
  PRowBatch* n = new PRowBatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRowBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PRowBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_tuples_.Clear();
  tuple_offsets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!tuple_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*tuple_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&num_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_compressed_) -
        reinterpret_cast<char*>(&num_rows_)) + sizeof(is_compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PRowBatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doris.PRowBatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 row_tuples = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_row_tuples())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_row_tuples())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 tuple_offsets = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_tuple_offsets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tuple_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes tuple_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tuple_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_compressed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doris.PRowBatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doris.PRowBatch)
  return false;
#undef DO_
}

void PRowBatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doris.PRowBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_rows = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_rows(), output);
  }

  // repeated int32 row_tuples = 2;
  for (int i = 0, n = this->row_tuples_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->row_tuples(i), output);
  }

  // repeated int32 tuple_offsets = 3;
  for (int i = 0, n = this->tuple_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->tuple_offsets(i), output);
  }

  // required bytes tuple_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->tuple_data(), output);
  }

  // required bool is_compressed = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_compressed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doris.PRowBatch)
}

::google::protobuf::uint8* PRowBatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doris.PRowBatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_rows = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_rows(), target);
  }

  // repeated int32 row_tuples = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->row_tuples_, target);

  // repeated int32 tuple_offsets = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->tuple_offsets_, target);

  // required bytes tuple_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->tuple_data(), target);
  }

  // required bool is_compressed = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_compressed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PRowBatch)
  return target;
}

size_t PRowBatch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doris.PRowBatch)
  size_t total_size = 0;

  if (has_tuple_data()) {
    // required bytes tuple_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tuple_data());
  }

  if (has_num_rows()) {
    // required int32 num_rows = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_rows());
  }

  if (has_is_compressed()) {
    // required bool is_compressed = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PRowBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PRowBatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes tuple_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tuple_data());

    // required int32 num_rows = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_rows());

    // required bool is_compressed = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 row_tuples = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->row_tuples_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->row_tuples_size());
    total_size += data_size;
  }

  // repeated int32 tuple_offsets = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->tuple_offsets_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tuple_offsets_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRowBatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PRowBatch)
  GOOGLE_DCHECK_NE(&from, this);
  const PRowBatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PRowBatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PRowBatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PRowBatch)
    MergeFrom(*source);
  }
}

void PRowBatch::MergeFrom(const PRowBatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PRowBatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_tuples_.MergeFrom(from.row_tuples_);
  tuple_offsets_.MergeFrom(from.tuple_offsets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_tuple_data();
      tuple_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tuple_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_rows_ = from.num_rows_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_compressed_ = from.is_compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PRowBatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PRowBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRowBatch::CopyFrom(const PRowBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PRowBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRowBatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PRowBatch::Swap(PRowBatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRowBatch::InternalSwap(PRowBatch* other) {
  using std::swap;
  row_tuples_.InternalSwap(&other->row_tuples_);
  tuple_offsets_.InternalSwap(&other->tuple_offsets_);
  tuple_data_.Swap(&other->tuple_data_);
  swap(num_rows_, other->num_rows_);
  swap(is_compressed_, other->is_compressed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PRowBatch::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PColumn_Decimal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PColumn_Decimal::kPrecisionFieldNumber;
const int PColumn_Decimal::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PColumn_Decimal::PColumn_Decimal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_data_2eproto::InitDefaultsPColumn_Decimal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doris.PColumn.Decimal)
}
PColumn_Decimal::PColumn_Decimal(const PColumn_Decimal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&precision_, &from.precision_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:doris.PColumn.Decimal)
}

void PColumn_Decimal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&precision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
}

PColumn_Decimal::~PColumn_Decimal() {
  // @@protoc_insertion_point(destructor:doris.PColumn.Decimal)
  SharedDtor();
}

void PColumn_Decimal::SharedDtor() {
}

void PColumn_Decimal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PColumn_Decimal::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PColumn_Decimal& PColumn_Decimal::default_instance() {
  ::protobuf_data_2eproto::InitDefaultsPColumn_Decimal();
  return *internal_default_instance();
}

PColumn_Decimal* PColumn_Decimal::New(::google::protobuf::Arena* arena) const {
  PColumn_Decimal* n = new PColumn_Decimal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PColumn_Decimal::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PColumn.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&precision_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&precision_)) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PColumn_Decimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doris.PColumn.Decimal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 precision = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_precision();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &precision_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scale = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doris.PColumn.Decimal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doris.PColumn.Decimal)
  return false;
#undef DO_
}

void PColumn_Decimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doris.PColumn.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 precision = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->precision(), output);
  }

  // optional uint32 scale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doris.PColumn.Decimal)
}

::google::protobuf::uint8* PColumn_Decimal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doris.PColumn.Decimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 precision = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->precision(), target);
  }

  // optional uint32 scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PColumn.Decimal)
  return target;
}

size_t PColumn_Decimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PColumn.Decimal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 precision = 1;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->precision());
    }

    // optional uint32 scale = 2;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scale());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PColumn_Decimal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PColumn.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  const PColumn_Decimal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PColumn_Decimal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PColumn.Decimal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PColumn.Decimal)
    MergeFrom(*source);
  }
}

void PColumn_Decimal::MergeFrom(const PColumn_Decimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PColumn.Decimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      precision_ = from.precision_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PColumn_Decimal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PColumn.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PColumn_Decimal::CopyFrom(const PColumn_Decimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PColumn.Decimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PColumn_Decimal::IsInitialized() const {
  return true;
}

void PColumn_Decimal::Swap(PColumn_Decimal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PColumn_Decimal::InternalSwap(PColumn_Decimal* other) {
  using std::swap;
  swap(precision_, other->precision_);
  swap(scale_, other->scale_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PColumn_Decimal::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PColumn::InitAsDefaultInstance() {
  ::doris::_PColumn_default_instance_._instance.get_mutable()->decimal_param_ = const_cast< ::doris::PColumn_Decimal*>(
      ::doris::PColumn_Decimal::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PColumn::kNameFieldNumber;
const int PColumn::kTypeFieldNumber;
const int PColumn::kIsNullFieldNumber;
const int PColumn::kBinaryFieldNumber;
const int PColumn::kCompressedFieldNumber;
const int PColumn::kDecimalParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PColumn::PColumn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_data_2eproto::InitDefaultsPColumn();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doris.PColumn)
}
PColumn::PColumn(const PColumn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      is_null_(from.is_null_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_binary()) {
    binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_);
  }
  if (from.has_decimal_param()) {
    decimal_param_ = new ::doris::PColumn_Decimal(*from.decimal_param_);
  } else {
    decimal_param_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&compressed_) -
    reinterpret_cast<char*>(&type_)) + sizeof(compressed_));
  // @@protoc_insertion_point(copy_constructor:doris.PColumn)
}

void PColumn::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&decimal_param_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compressed_) -
      reinterpret_cast<char*>(&decimal_param_)) + sizeof(compressed_));
}

PColumn::~PColumn() {
  // @@protoc_insertion_point(destructor:doris.PColumn)
  SharedDtor();
}

void PColumn::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decimal_param_;
}

void PColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PColumn::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PColumn& PColumn::default_instance() {
  ::protobuf_data_2eproto::InitDefaultsPColumn();
  return *internal_default_instance();
}

PColumn* PColumn::New(::google::protobuf::Arena* arena) const {
  PColumn* n = new PColumn;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_null_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!binary_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*binary_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(decimal_param_ != NULL);
      decimal_param_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compressed_) -
        reinterpret_cast<char*>(&type_)) + sizeof(compressed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doris.PColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "doris.PColumn.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .doris.PColumn.DataType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::doris::PColumn_DataType_IsValid(value)) {
            set_type(static_cast< ::doris::PColumn_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool is_null = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 24u, input, this->mutable_is_null())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_is_null())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes binary = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool compressed = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_compressed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compressed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .doris.PColumn.Decimal decimal_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_decimal_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doris.PColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doris.PColumn)
  return false;
#undef DO_
}

void PColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doris.PColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doris.PColumn.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .doris.PColumn.DataType type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated bool is_null = 3;
  for (int i = 0, n = this->is_null_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      3, this->is_null(i), output);
  }

  // optional bytes binary = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->binary(), output);
  }

  // optional bool compressed = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->compressed(), output);
  }

  // optional .doris.PColumn.Decimal decimal_param = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->decimal_param_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doris.PColumn)
}

::google::protobuf::uint8* PColumn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doris.PColumn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "doris.PColumn.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .doris.PColumn.DataType type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated bool is_null = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteBoolToArray(3, this->is_null_, target);

  // optional bytes binary = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->binary(), target);
  }

  // optional bool compressed = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->compressed(), target);
  }

  // optional .doris.PColumn.Decimal decimal_param = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->decimal_param_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PColumn)
  return target;
}

size_t PColumn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:doris.PColumn)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required .doris.PColumn.DataType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t PColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PColumn)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required .doris.PColumn.DataType type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bool is_null = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->is_null_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->is_null_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 6u) {
    // optional bytes binary = 4;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->binary());
    }

    // optional .doris.PColumn.Decimal decimal_param = 6;
    if (has_decimal_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->decimal_param_);
    }

  }
  // optional bool compressed = 5 [default = false];
  if (has_compressed()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PColumn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const PColumn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PColumn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PColumn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PColumn)
    MergeFrom(*source);
  }
}

void PColumn::MergeFrom(const PColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  is_null_.MergeFrom(from.is_null_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_binary();
      binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_decimal_param()->::doris::PColumn_Decimal::MergeFrom(from.decimal_param());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      compressed_ = from.compressed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PColumn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PColumn::CopyFrom(const PColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PColumn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  return true;
}

void PColumn::Swap(PColumn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PColumn::InternalSwap(PColumn* other) {
  using std::swap;
  is_null_.InternalSwap(&other->is_null_);
  name_.Swap(&other->name_);
  binary_.Swap(&other->binary_);
  swap(decimal_param_, other->decimal_param_);
  swap(type_, other->type_);
  swap(compressed_, other->compressed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PColumn::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PBlock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBlock::kNumRowsFieldNumber;
const int PBlock::kNumColumnsFieldNumber;
const int PBlock::kColumnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBlock::PBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_data_2eproto::InitDefaultsPBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:doris.PBlock)
}
PBlock::PBlock(const PBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_rows_, &from.num_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_columns_) -
    reinterpret_cast<char*>(&num_rows_)) + sizeof(num_columns_));
  // @@protoc_insertion_point(copy_constructor:doris.PBlock)
}

void PBlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&num_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_columns_) -
      reinterpret_cast<char*>(&num_rows_)) + sizeof(num_columns_));
}

PBlock::~PBlock() {
  // @@protoc_insertion_point(destructor:doris.PBlock)
  SharedDtor();
}

void PBlock::SharedDtor() {
}

void PBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBlock::descriptor() {
  ::protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBlock& PBlock::default_instance() {
  ::protobuf_data_2eproto::InitDefaultsPBlock();
  return *internal_default_instance();
}

PBlock* PBlock::New(::google::protobuf::Arena* arena) const {
  PBlock* n = new PBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:doris.PBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&num_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_columns_) -
        reinterpret_cast<char*>(&num_rows_)) + sizeof(num_columns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:doris.PBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 num_rows = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_rows();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_rows_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_columns = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_columns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_columns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .doris.PColumn columns = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:doris.PBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:doris.PBlock)
  return false;
#undef DO_
}

void PBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:doris.PBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 num_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->num_rows(), output);
  }

  // optional uint32 num_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_columns(), output);
  }

  // repeated .doris.PColumn columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->columns(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:doris.PBlock)
}

::google::protobuf::uint8* PBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:doris.PBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 num_rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->num_rows(), target);
  }

  // optional uint32 num_columns = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_columns(), target);
  }

  // repeated .doris.PColumn columns = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->columns(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:doris.PBlock)
  return target;
}

size_t PBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:doris.PBlock)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .doris.PColumn columns = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 num_rows = 1;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num_rows());
    }

    // optional uint32 num_columns = 2;
    if (has_num_columns()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_columns());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:doris.PBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const PBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:doris.PBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:doris.PBlock)
    MergeFrom(*source);
  }
}

void PBlock::MergeFrom(const PBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:doris.PBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      num_rows_ = from.num_rows_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_columns_ = from.num_columns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:doris.PBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBlock::CopyFrom(const PBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:doris.PBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBlock::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->columns())) return false;
  return true;
}

void PBlock::Swap(PBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBlock::InternalSwap(PBlock* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  swap(num_rows_, other->num_rows_);
  swap(num_columns_, other->num_columns_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBlock::GetMetadata() const {
  protobuf_data_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_data_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace doris

// @@protoc_insertion_point(global_scope)
